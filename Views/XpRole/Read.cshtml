@inject IHtmlLocalizer<DbAdm.R0> R0
@inject IViewLocalizer R
@{
    var isAuthRow = _Fun.IsAuthTypeRow();
    var authRanges = (List<IdStrDto>)ViewBag.AuthRanges;
    var progs = GetProgs(); //for select input
}

@functions {
    //re-set menu.Name(add locale)
    public List<IdStrDto> GetProgs()
    {
        return new List<IdStrDto>()
        {
            new() { Id = "Project", Str = R0["MenuProject"].Value },
            new() { Id = "Table", Str = R0["MenuTable"].Value },
            new() { Id = "Column", Str = R0["MenuColumn"].Value },
            new() { Id = "MyCrud", Str = R0["MenuMyCrud"].Value },
            new() { Id = "SetPwd", Str = R0["MenuSetPwd"].Value },
            new() { Id = "PrjProg", Str = R0["MenuPrjProg"].Value },
            new() { Id = "Issue", Str = R0["MenuIssue"].Value },
            new() { Id = "XpUser", Str = R0["MenuXpUser"].Value },
            new() { Id = "XpRole", Str = R0["MenuXpRole"].Value },
            new() { Id = "XpProg", Str = R0["MenuXpProg"].Value },
            new() { Id = "RptIssue", Str = R0["MenuRptIssue"].Value },
            new() { Id = "Survey", Str = "滿意度問卷" },
            new() { Id = "ChartSatis", Str = "統計圖-滿意度問卷" },
        };
    }
}

<style>
    .xu-user {
        width: 560px;
        height: 520px;
    }

    .xu-user-box{
        height: 415px;
    }
</style>

<script src="~/js/view/XpRole.js"></script>
<script type="text/javascript">
    $(function () {
        _me.init();
    });
</script>

@await Component.InvokeAsync("XgProgPath", new { names = new string[] { R0["MenuXpRole"].Value } })
<div class="x-prog">
    <div id="divRead">
        <form id='formRead' class='x-form'>
            <div class="row">
                @await Component.InvokeAsync("XiText", new XiTextDto { Title = R["RoleName"].Value, Fid = "Name", MaxLen = 30, InRow = true })
                @await Component.InvokeAsync("XgFindTbar", new XgFindTbarDto { HasReset = true })
            </div>
        </form>

        <div class='x-btns-box'>
            @await Component.InvokeAsync("XgCreate")
        </div>
        <table id="tableRead" class="table x-table" cellspacing="0">
            <thead>
                <tr>
                    <th>@R["RoleName"]</th>
                    <th>@R0["Crud"]</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="divEdit" class="d-none">
        <form id='eform' class='x-form'>
            @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "Id" })
            @await Component.InvokeAsync("XiText", new XiTextDto { Title = R["RoleName"].Value, Fid = "Name", MaxLen = 30, Required = true })
        </form>

        <div class='x-btns-box mt-1'>
            <span class="x-span-label">@R["UserList"]</span>
            <button type="button" class="btn btn-secondary x-btn-gray" onclick="_me.onOpenUser()">@R0["Select"]<i class='ico-checked'></i></button>
        </div>
        <form id='eformUserRole' class='x-form'>
            <table class="table x-table" cellspacing="0">
                <thead>
                    <tr>
                        <th>@R0["DeptName"]</th>
                        <th>@R0["Account"]</th>
                        <th>@R0["UserName"]</th>
                        <th>@R0["Crud"]</th>
                    </tr>
                </thead>
                <tbody id="tbodyUserRole"></tbody>
            </table>
        </form>

        <div class='x-btns-box'>
            <span class="x-span-label">@R["RoleProg"]</span>
            @await Component.InvokeAsync("XgAddRow", "_me.mRoleProg.onAddRow()")
        </div>
        <form id='eformRoleProg' class='x-form border-0'>
            <table class="table x-table x-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        @await Component.InvokeAsync("XgTh", new XgThDto { Title = R["Prog"].Value, Tip = "欄位前面有*表示有資料權限",  Required = true })
                        <th>@R0["Create"]</th>
                        <th>@R0["Read"]</th>
                        <th>@R0["Update"]</th>
                        <th>@R0["Delete"]</th>
                        <th>@R0["Print"]</th>
                        <th>@R0["Export"]</th>
                        <th>@R0["View"]</th>
                        <th>@R0["Crud"]</th>
                    </tr>
                </thead>
                <tbody id="tbodyRoleProg"></tbody>
            </table>
        </form>
        <vc:xg-save-back />
    </div>
</div>

<script id="tplUserRole" type="text/template">
    <tr>
        @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "Id" })
        @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "RoleId" })
        @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "UserId" })

        <td class='text-center'>{{DeptName}}</td>
        <td class='text-center'>{{Account}}</td>
        <td class='text-center'>{{UserName}}</td>
        <td width='60px' class='text-center'>@await Component.InvokeAsync("XgDeleteRow", "_me.mUserRole.onDeleteRow(this)")</td>
    </tr>
</script>

<script id="tplRoleProg" type="text/template">
    <tr>
        @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "Id" })
        @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "RoleId" })
        <td>@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "ProgId", Rows = progs, Required = true })</td>

        @if (isAuthRow)
        {
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunCreate" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunRead", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunUpdate", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunDelete", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunPrint", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunExport", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunView", Rows = authRanges })</td>
        }
        else
        {
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunCreate" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunRead" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunUpdate" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunDelete" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunPrint" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunExport" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunView" })</td>
        }

        <td width='60px' class='text-center'>@await Component.InvokeAsync("XgDeleteRow", "_me.mRoleProg.onDeleteRow(this)")</td>
    </tr>
</script>

<!-- modal: select user -->
<div id="modalUser" class="modal fade x-modal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content xu-user">
            <div class="modal-header">
                <div class="modal-title">選取使用者</div>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-1">
                    <div class="col-md-3 x-right pt-2">@R0["DeptName"]</div>
                    <div class="col-md-5">
                        @await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "DeptId", Rows = ViewBag.Depts })
                    </div>
                </div>
                <div class="row mb-1">
                    <div class="col-md-3 x-right pt-2">@R0["Account"]</div>
                    <div class="col-md-5">
                        @await Component.InvokeAsync("XiText", new XiTextDto { Fid = "Account" })
                    </div>
                    <div class="col-md-4 x-right">
                        <button type="button" class="btn btn-primary" onclick="_me.onFindUserA()">查詢<i class='ico-find'></i></button>
                        <button type="button" class="btn btn-secondary" onclick="_me.onUserModalOk()">選取<i class='ico-checked'></i></button>
                    </div>
                </div>

                <!-- query result list -->
                <div class='x-scroll xu-user-box'>
                    <table id="tableUser" class="table x-table w-100" cellspacing="0">
                        <thead>
                            <tr>
                                <th>@R0["Select"]</th>
                                <th>@R0["DeptName"]</th>
                                <th>@R0["Account"]</th>
                                <th>@R0["UserName"]</th>
                            </tr>
                        </thead>
                        <!-- match tplItemTr -->
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- template: modal user list row, data property is case insense !! -->
<script id="tplUser" type="text/template">
    <tr data-id='{{Id}}'
        data-account='{{Account}}'
        data-userName='{{UserName}}'
        data-deptName='{{DeptName}}'>
        <td>
            @await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "_check0" })
        </td>
        <td>{{DeptName}}</td>
        <td>{{Account}}</td>
        <td>{{UserName}}</td>
    </tr>
</script>
