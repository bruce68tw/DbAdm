@{
    var isAuthRow = _Fun.IsAuthTypeRow();
    var authRanges = (List<IdStrDto>)ViewBag.AuthRanges;
    //var progs = GetProgs(); //for select input
}

@*
@functions {
    //re-set menu.Name(add locale)
    public List<IdStrDto> GetProgs()
    {
        return new List<IdStrDto>()
        {
            new() { Id = "Project", Str = R0["MenuProject"].Value },
            new() { Id = "Table", Str = R0["MenuTable"].Value },
            new() { Id = "Column", Str = R0["MenuColumn"].Value },
            new() { Id = "MyCrud", Str = R0["MenuMyCrud"].Value },
            new() { Id = "SetPwd", Str = R0["MenuSetPwd"].Value },
            new() { Id = "PrjProg", Str = R0["MenuPrjProg"].Value },
            new() { Id = "Issue", Str = R0["MenuIssue"].Value },
            new() { Id = "XpUser", Str = R0["MenuXpUser"].Value },
            new() { Id = "XpRole", Str = R0["MenuXpRole"].Value },
            new() { Id = "XpProg", Str = R0["MenuXpProg"].Value },
            new() { Id = "RptIssue", Str = R0["MenuRptIssue"].Value },
            new() { Id = "Survey", Str = "滿意度問卷" },
            new() { Id = "ChartSatis", Str = "統計圖-滿意度問卷" },
        };
    }
}
*@

<style nonce="@_Fun.Nonce">
    .xu-user {
        width: 560px;
        height: 520px;
    }

    .xu-user-box{
        height: 415px;
    }
</style>

<script nonce="@_Fun.Nonce">
    $(function () {
        _me.init();
    });

    var _me = {
        init: function () {        
            //datatable config
            var config = {
                columns: [
                    { data: 'Name' },
                    { data: '_Fun' },
                ],
                columnDefs: [
				    { targets: [1], render: function (data, type, full, meta) {
                        return _me.crudR.dtCrudFun(full.Id, full.Name, true, true, true);
                    }},
                ],
            };

            //initial
            _me.mUserRole = new EditMany('Id', 'tbodyUserRole', 'tplUserRole', 'tr');
            _me.mRoleProg = new EditMany('Id', 'tbodyRoleProg', 'tplRoleProg', 'tr');
            new CrudR(config, [null, _me.mUserRole, _me.mRoleProg]);

            //_me.divUsers = $('#divUsers');
            //_me.mUserRoleFids = ['Id', 'UserId']; //key fid, child fid
            _me.divUrBody = $('#tbodyUserRole');    //tbody of user role
            _me.tplUr = $('#tplUserRole').html();   //tpl of user role
            _me.modalUser = $('#modalUser');        //modal for select user
            _me.modalUserBody = _me.modalUser.find('tbody');
            _me.tplUser = $('#tplUser').html();     //tpl of modal user row
        },

        //on open select user modal
        onOpenUser: function () {
            _modal.showO(_me.modalUser);
        },

        //onclick find user
        onFindUserA: async function () {        
            var data = {
                account: _itext.get('Account', _me.modalUser),
                deptId: _iselect.get('DeptId', _me.modalUser),
                name: _itext.get('Name', _me.modalUser),
            };
            await _ajax.getJsonA('GetUsers', data, function (rows) {
                _me.modalUserBody.empty();
                for (var i = 0; i < rows.length; i++) {
                    //這裡不必註記"新增"
                    _me.modalUserBody.append($(Mustache.render(_me.tplUser, rows[i])));
                }
            });
        },

        //onclick ok at Item(R/Q/E) modal
        onUserModalOk: function () {
            //get checked columns list
            var rows = [];
            _me.modalUserBody.find(':checkbox:checked').each(function (idx) {
                var obj = $(this);
                var tr = obj.closest('tr');
                //data 屬性不區分大小寫 !!
                rows[idx] = {
                    UserId: tr.data('id'),
                    Account: tr.data('account'),
                    UserName: tr.data('username'),
                    DeptName: tr.data('deptname'),
                };
            });
            var rowLen = rows.length;
            if (rowLen === 0) {
                _tool.msg('請先選取資料。');
                return;
            }

            //append rows if not existed
            for (var i = 0; i < rowLen; i++) {
                //check existed
                var row = rows[i];
                if (_me.divUrBody.find('[value=' + row.UserId + ']').length > 0)
                    continue;

                var tr = $(Mustache.render(_me.tplUr, row));
                _form.loadRow(tr, row);
                _me.mUserRole.setNewIdByBox(tr);
                _me.divUrBody.append(tr);
            }

            //remove checked for next usage, hide modal
            _me.modalUser.find(':checkbox:checked').prop('checked', false);
            _modal.hideO(_me.modalUser);
        },

    }; //class
</script>

<vc:xg-prog-path />
<div class="x-prog">
    <div id="divRead">
        <form id='formRead' class='x-form'>
            <div class="row">
                @await Component.InvokeAsync(XiEstr.Text, new XiTextDto { Title = "角色名稱", Fid = "Name", MaxLen = 30, InRow = true })
                @await Component.InvokeAsync("XgFindTbar", new XgFindTbarDto { HasReset = true })
            </div>
        </form>

        <div class='x-btns-box'>
            @await Component.InvokeAsync("XgCreate")
        </div>
        <table id="tableRead" class="table x-table" cellspacing="0">
            <thead>
                <tr>
                    <th>角色名稱</th>
                    <th>維護</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="divEdit" class="d-none">
        <form id='eform' class='x-form'>
            @await Component.InvokeAsync(XiEstr.Hide, new XiHideDto { Fid = "Id" })
            @await Component.InvokeAsync(XiEstr.Text, new XiTextDto { Title = "角色名稱", Fid = "Name", MaxLen = 30, Required = true })
        </form>

        <div class='x-btns-box mt-1'>
            <span class="x-span-label">用戶清單</span>
            <button type="button" class="btn btn-secondary" data-onclick="_me.onOpenUser">選取<i class='ico-checked'></i></button>
        </div>
        <form id='eformUserRole' class='x-form'>
            <table class="table x-table" cellspacing="0">
                <thead>
                    <tr>
                        <th>部門名稱</th>
                        <th>帳號</th>
                        <th>用戶名稱</th>
                        <th>維護</th>
                    </tr>
                </thead>
                <tbody id="tbodyUserRole"></tbody>
            </table>
        </form>

        <div class='x-btns-box'>
            <span class="x-span-label">角色功能</span>
            @await Component.InvokeAsync("XgAddRow", "_me.mRoleProg.onAddRow")
        </div>
        <form id='eformRoleProg' class='x-form border-0'>
            <table class="table x-table x-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        @await Component.InvokeAsync("XgTh", new XgThDto { Title = "功能", Tip = "欄位前面有*表示有資料權限",  Required = true })
                        <th>新增</th>
                        <th>查詢</th>
                        <th>修改</th>
                        <th>刪除</th>
                        <th>列印</th>
                        <th>匯出</th>
                        <th>檢視</th>
                        <th>維護</th>
                    </tr>
                </thead>
                <tbody id="tbodyRoleProg"></tbody>
            </table>
        </form>
        <vc:xg-save-back />
    </div>
</div>

<script id="tplUserRole" type="text/template">
    <tr>
        @await Component.InvokeAsync(XiEstr.Hide, new XiHideDto { Fid = "Id" })
        @await Component.InvokeAsync(XiEstr.Hide, new XiHideDto { Fid = "RoleId" })
        @await Component.InvokeAsync(XiEstr.Hide, new XiHideDto { Fid = "UserId" })

        <td class='text-center'>{{DeptName}}</td>
        <td class='text-center'>{{Account}}</td>
        <td class='text-center'>{{UserName}}</td>
        <td width='60px' class='text-center'>@await Component.InvokeAsync("XgDeleteRow", "_me.mUserRole.onDeleteRow")</td>
    </tr>
</script>

<script id="tplRoleProg" type="text/template">
    <tr>
        @await Component.InvokeAsync(XiEstr.Hide, new XiHideDto { Fid = "Id" })
        @await Component.InvokeAsync(XiEstr.Hide, new XiHideDto { Fid = "RoleId" })
        <td>@await Component.InvokeAsync(XiEstr.Select, new XiSelectDto { Fid = "ProgId", Rows = ViewBag.Progs, Required = true })</td>

        @if (isAuthRow)
        {
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Check, new XiCheckDto { Fid = "FunCreate" })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Select, new XiSelectDto { Fid = "FunRead", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Select, new XiSelectDto { Fid = "FunUpdate", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Select, new XiSelectDto { Fid = "FunDelete", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Select, new XiSelectDto { Fid = "FunPrint", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Select, new XiSelectDto { Fid = "FunExport", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Select, new XiSelectDto { Fid = "FunView", Rows = authRanges })</td>
        }
        else
        {
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Check, new XiCheckDto { Fid = "FunCreate" })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Check, new XiCheckDto { Fid = "FunRead" })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Check, new XiCheckDto { Fid = "FunUpdate" })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Check, new XiCheckDto { Fid = "FunDelete" })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Check, new XiCheckDto { Fid = "FunPrint" })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Check, new XiCheckDto { Fid = "FunExport" })</td>
            <td class="x-center">@await Component.InvokeAsync(XiEstr.Check, new XiCheckDto { Fid = "FunView" })</td>
        }

        <td width='60px' class='text-center'>@await Component.InvokeAsync("XgDeleteRow", "_me.mRoleProg.onDeleteRow")</td>
    </tr>
</script>

<!-- modal: select user -->
<div id="modalUser" class="modal fade x-modal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content xu-user">
            <div class="modal-header">
                <div class="modal-title">選取使用者</div>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-1">
                    <div class="col-md-3 x-right pt-2">部門名稱</div>
                    <div class="col-md-5">
                        @await Component.InvokeAsync(XiEstr.Select, new XiSelectDto { Fid = "DeptId", Rows = ViewBag.Depts })
                    </div>
                </div>
                <div class="row mb-1">
                    <div class="col-md-3 x-right pt-2">帳號</div>
                    <div class="col-md-5">
                        @await Component.InvokeAsync(XiEstr.Text, new XiTextDto { Fid = "Account" })
                    </div>
                    <div class="col-md-4 x-right">
                        <button type="button" class="btn btn-primary" data-onclick="_me.onFindUserA">查詢<i class='ico-find'></i></button>
                        <button type="button" class="btn btn-secondary" data-onclick="_me.onUserModalOk">選取<i class='ico-checked'></i></button>
                    </div>
                </div>

                <!-- query result list -->
                <div class='x-scroll xu-user-box'>
                    <table id="tableUser" class="table x-table w-100" cellspacing="0">
                        <thead>
                            <tr>
                                <th>選取</th>
                                <th>部門名稱</th>
                                <th>帳號</th>
                                <th>用戶名稱</th>
                            </tr>
                        </thead>
                        <!-- match tplModalItem -->
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- template: modal user list row, data property is case insense !! -->
<script id="tplUser" type="text/template">
    <tr data-id='{{Id}}'
        data-account='{{Account}}'
        data-userName='{{UserName}}'
        data-deptName='{{DeptName}}'>
        <td>
            @await Component.InvokeAsync(XiEstr.Check, new XiCheckDto { Fid = "_check0" })
        </td>
        <td>{{DeptName}}</td>
        <td>{{Account}}</td>
        <td>{{UserName}}</td>
    </tr>
</script>
