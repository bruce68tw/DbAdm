@{
    var cols = "4,6";
}

<style nonce="@_Fun.Nonce" >
    #divEdit {
        display: flex;
        flex-direction: row;
    }
    .xu-ui-area {
        flex-grow: 1;
        border: 1px solid #ddd !important;
    }
    .xu-eform-tail {
        flex-grow: 1;
    }
</style>

<script nonce="@_Fun.Nonce" src="~/js/view/UiBase.js"></script>
<script nonce="@_Fun.Nonce" src="~/js/view/UiForm.js"></script>
<script nonce="@_Fun.Nonce">
    $(function () {
        _me.init();
    });

    var _me = {
        init: function () {
            var config = {
                columns: [
                    { data: 'ProjectName', orderable: true },
                    { data: 'Code', orderable: true },
                    { data: 'Name', orderable: true },
                    { data: '_Fun' },
                    { data: '_Crud' },
                ],
                columnDefs: [
                    { targets: [3], render: function (data, type, full, meta) {
                        return '';
                    }},
                    { targets: [4], render: function (data, type, full, meta) {
                        return _me.crudR.dtCrudFun(full.Id, full.Name, true, true, true);
                    }},
                ],
            };

            //save, back button
            _me.divEditTbar = $('#divEditTbar');

            //initial edit one/many, rowsBox(參數2) 使用 eform
            _me.mItem = new EditMany('Id', 'eformItems', 'tplItem', '.xd-tr');
            //_me.mLine = new EditMany('Id', 'eformLines', 'tplLine', '.xd-tr', 'Sort');
            new CrudR(config, [null, _me.mItem]);

            //initial flow edit form
            _me.uiForm = new UiForm('divEdit', _me.mItem, '.xu-ui-area');

            //custom function
            _me.mItem.fnLoadRows = _me.mItem_loadRows;
            _me.mItem.fnGetUpdJson = _me.mItem_getUpdJson;
            _me.mItem.fnValid = _me.mItem_valid;

            //for flow test
            //_me.divFlowTest = $('#divFlowTest');
            //_me.nowFlowCode = '';
        },

        //generate json
        onGenJson: function () {
            var values = _icheck.getCheckeds(_me.crudR.divRead);
            if (values.length > 0)
                window.location = 'GenJson?key=' + values.join(',');
            else
                _tool.msg('請先選取資料。');
        },

        //auto called
        fnAfterSwap: function (toRead) {
            if (toRead) {
                _obj.hide(_me.divEditTbar);
            } else {
                _obj.show(_me.divEditTbar);
            }
        },

        //auto called !!
        //reset when create
        fnAfterOpenEdit: function (fun, json) {
            var isAdd = (fun === EstrFun.Create);
            if (isAdd) {
                _me.uiForm.reset();
            }
            _me.uiForm.setEdit(isAdd || (fun === EstrFun.Update));
        },

        /**
         * auto called !!
         * jsPlumb line container must visible when rendering
         * see _me.crudE.js _updateOrViewA()
         * param {string} fun
         * param {string} key
         * returns {bool}
         */
        fnUpdateOrViewA: async function (fun, key) {
            var act = (fun == EstrFun.Update)
                ? 'GetUpdJson' : 'GetViewJson';
            return await _ajax.getJsonA(act, { key: key }, function (json) {
                //show container first
                _me.crudR.toEditMode(fun, () => {
                    _me.crudE.loadJson(json);
                    _me.crudE.setEditStatus(fun);
                    _me.crudE.afterOpen(fun, json);
                });
            });
        },

        //#region mItem/mLine custom function
        //load nodes
        mItem_loadRows: function (rows) {
            _me.uiForm.loadNodes(rows);
        },

        //getUpdJson
        mItem_getUpdJson: function (upKey) {
            return _me.mItem.getUpdJsonByRsb(upKey);
        },

        //return boolean
        mItem_valid: function () {
            return true;
        },

        /*
        mLine_loadRows: function (rows) {
            _me.uiForm.loadLines(rows);
        },

        //getUpdJson
        mLine_getUpdJson: function (upKey) {
            return _me.mLine.getUpdJsonByRsb(upKey);
        },

        //return boolean
        mLine_valid: function () {
            return true;
        },
        */
        //#endregion

        /*
        //測試流程
        onOpenTest: function (code) {
            //read old row if need
            _me.nowFlowCode = code;

            //show div
            _me.testToRead(false)
        },

        onSaveTestA: async function () {
            //check & save
            var data = {
                code: _me.nowFlowCode,
                data: _itextarea.get('Data', _me.divFlowTest),
            };
            await _ajax.getStrA('SaveTest', data, function (error) {
                if (_str.isEmpty(error)) {
                    _tool.msg('作業完成。');
                    _me.testToRead(true);
                } else {
                    _tool.msg(error);
                }
            });
        },

        //show Read form or not
        testToRead: function (toRead) {
            _me.crudR.swap(toRead, _me.divFlowTest);
        },
        */

    }; //class
</script>

<div class="row">
    <div class="col-md-6">
        <vc:xg-prog-path />
    </div>
    <div class="col-md-6 d-none pt-2" id="divEditTbar">
        <vc:xg-save-back align="right me-3" />
    </div>
</div>

<!-- 使用 x-prog 會出現 border -->
<div class="px-2">
    <div id="divRead">
        <form id='formRead' class='x-form mb-0'>
            <div class="row">
                @await Component.InvokeAsync("XiSelect", new XiSelectDto { Title = "專案", Fid = "ProjectId", Rows = ViewBag.Projects, InRow = true })
                @await Component.InvokeAsync("XgFindTbar", new XgFindTbarDto { HasReset = true })
            </div>
            @await Component.InvokeAsync("XiText", new XiTextDto { Title = "畫面代碼", Fid = "Code", MaxLen = 30 })
            @await Component.InvokeAsync("XiText", new XiTextDto { Title = "畫面名稱", Fid = "Name", MaxLen = 30 })
        </form>

        <div class='x-btns-box mt-1'>
            @await Component.InvokeAsync("XgCreate")
            <button type="button" class="btn btn-secondary" data-onclick="_me.onGenJson">產生Json</button>
        </div>

        <table id="tableRead" class="table table-bordered x-table" cellspacing="0">
            <thead>
                <tr>
                    <th>專案</th>
                    <th>畫面代碼</th>
                    <th>畫面名稱</th>
                    <th class='x-w100'>功能</th>
                    <th class='x-w100'>維護</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="divEdit" class="d-flex d-none vh-100">
        <!-- eform 在 uiForm 下面, 使用 z-index無效, 改用 width -->
        <form id='eform' class='x-form x-w100 me-2 vh-100'>
            <vc:xi-hide dto='new() { Fid = "Id" }' />
            <vc:xi-text dto='new() { Fid = "Code" , MaxLen = 20, Required = true, BoxClass = "xu-text w-150" , InputTip = "畫面代碼",  InputAttr = "title=畫面代碼" }' />
            <vc:xi-text dto='new() { Fid = "Name", MaxLen = 30, Required = true, BoxClass = "xu-text w-150", InputTip = "畫面名稱", InputAttr = "title=畫面名稱" }' />

            <!-- add outer div for validate msg layout -->
            <div>
                <div class="btn-group-vertical ms-1" role="group" aria-label="button group vertical">
                    <button type="button" class="btn xf-node" data-onclick="_me.uiForm.onAddCol" Title='增加輸入欄位'>輸入欄位</button>
                    <button type="button" class="btn xf-start" data-onclick="_me.uiForm.onAddBox" Title='增加2欄位的容器'>2欄容器</button>
                    <button type="button" class="btn xf-end" data-onclick="_me.uiForm.onAddGroup" Title='增加Group文字'>Group文字</button>
                    <button type="button" class="btn xf-end" data-onclick="_me.uiForm.onAddTable" Title='增加Table'>多筆表格</button>
                </div>
            </div>
            <div class="xu-eform-tail">
            </div>
        </form>

        <!-- UI 區域 -->
        <div class="xu-ui-area">
        </div>

        <!-- uiItems editMany -->
        <form id='eformItems' class='d-none'>
        </form>

        <!-- uiCols editMany -->
        <form id='eformCols' class='d-none'>
        </form>
    </div>
</div>


<!-- context menu for node & line, xf means flow -->
<ul class='xf-menu'>
    <li data-onclick="_me.uiForm.onMenuEdit" class="xd-edit">Edit</li>
    <li data-onclick="_me.uiForm.onMenuDelete" class="xd-delete">Delete</li>
    <li data-onclick="_me.uiForm.onMenuView" class="xd-view">View</li>
</ul>

<!-- uiItem template for eformItems -->
<script id="tplItem" type="text/template">
    <div class="xd-tr">
        <vc:xi-hide dto='new() { Fid = "Id" }' />
        <vc:xi-hide dto='new() { Fid = "UiId" }' />
        <vc:xi-hide dto='new() { Fid = "ItemType" }' />
        <vc:xi-hide dto='new() { Fid = "Info" }' />
        <vc:xi-hide dto='new() { Fid = "Sort" }' />
    </div>
</script>

<!-- uiCol template for eformCols -->
<script id="tplCol" type="text/template">
    <div class="xd-tr">
        <vc:xi-hide dto='new() { Fid = "Id" }' />
        <vc:xi-hide dto='new() { Fid = "UiId" }' />
        <vc:xi-hide dto='new() { Fid = "InputType" }' />
        <vc:xi-hide dto='new() { Fid = "Code" }' />
        <vc:xi-hide dto='new() { Fid = "Name" }' />
        <vc:xi-hide dto='new() { Fid = "Required" }' />
        <vc:xi-hide dto='new() { Fid = "Sort" }' />
    </div>
</script>

<!-- 欄位內容 modal -->
<div id="modalItemProp" class="modal fade x-modal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">設定欄位內容</div>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form class="form-horizontal x-form pt-1 pe-5">
                    <vc:xi-hide dto='new() { Fid="NodeType" }' />
                    <vc:xi-text dto='new() { Title="標題", Fid="Name" , MaxLen=30, Required=true, Cols=cols }' />
                    <vc:xi-select dto='new() { Title = "欄位種類", Fid = "SignerType", Rows = ViewBag.SignerTypes, Required = true, Cols = cols }' />
                    <vc:xi-text dto='new() { Title = "簽核者內容值", Fid = "SignerValue", MaxLen = 30, Cols = cols }' />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" data-onclick="_me.uiForm.onModalNodeOk">確定</button>
            </div>
        </div>
    </div>
</div>
