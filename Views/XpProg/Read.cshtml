@{ 
    var isAuthRow = _Fun.IsAuthTypeRow();
    var authRanges = (List<IdStrDto>)ViewBag.AuthRanges;
}

<script nonce="@_Fun.Nonce">
    $(function () {
        _me.init();
    });

    var _me = {
        init: function () {
            //datatable config
            var config = {
                columns: [
                    { data: 'Code' },
                    { data: 'Name' },
                    { data: 'Url' },
                    { data: 'AuthRow' },
                    { data: 'Sort' },
                    { data: '_Fun' },
                ],
                columnDefs: [
                    { targets: [3], render: function (data, type, full, meta) {
                        return _me.crudR.dtYesEmpty(data);
                    }},
                    { targets: [5], render: function (data, type, full, meta) {
                        return _me.crudR.dtCrudFun(full.Id, full.Name, true, true, true);
                    }},
                ],
            };

            //initial
            _me.mRoleProg = new EditMany('Id', 'tbodyRoleProg', 'tplRoleProg', 'tr');
            new CrudR(config, [null, _me.mRoleProg]);
        },

    }; //class
</script>

<vc:xg-prog-path />
<div class="x-prog">
    <div id="divRead">
        <form id='formRead' class='x-form'>
            <div class="row">
                @await Component.InvokeAsync("XiText", new XiTextDto { Title = "功能代碼", Fid = "Code", MaxLen = 30, InRow = true })
                @await Component.InvokeAsync("XgFindTbar")
            </div>
            @await Component.InvokeAsync("XiText", new XiTextDto { Title = "功能名稱", Fid = "Name", MaxLen = 30 })
        </form>

        <div class='x-btns-box'>
            @await Component.InvokeAsync("XgCreate")
        </div>
        <table id="tableRead" class="table x-table" cellspacing="0">
            <thead>
                <tr>
                    <th>功能代碼</th>
                    <th>功能名稱</th>
                    <th>Url</th>
                    <th>資料等級權限</th>
                    <th width="80px">排序</th>
                    <th width="100px">維護</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="divEdit" class="d-none">
        <form id='eform' class='x-form'>
            @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "Id" })
            @await Component.InvokeAsync("XiText", new XiTextDto { Title = "功能代碼", Fid = "Code", MaxLen = 30, Required = true })
            @await Component.InvokeAsync("XiText", new XiTextDto { Title = "功能名稱", Fid = "Name", MaxLen = 30, Required = true })
            @*await Component.InvokeAsync("XiText", new XiTextDto { Title = "Icon", Fid = "Icon", MaxLen = 20 })*@
            @await Component.InvokeAsync("XiText", new XiTextDto { Title = "Url", Fid = "Url", MaxLen = 100, Required = true })
            @await Component.InvokeAsync("XiInt", new XiIntDto { Title = "排序", Fid = "Sort", Required = true, Cols = "2,1" })
            @if (isAuthRow)
            {
                @await Component.InvokeAsync("XiCheck", new XiCheckDto { Title = "資料等級權限", Fid = "AuthRow", Label = "是" })
            }

            <div class="row">
                <div class="col-md-2 x-label">CRUD功能</div>
                <div class="col-md-9 x-input pt-1">
                    @await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunCreate", Label = "新增" })
                    @await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunRead", Label = "查詢" })
                    @await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunUpdate", Label = "修改" })
                    @await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunDelete", Label = "刪除" })
                    @await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunPrint", Label = "列印" })
                    @await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunExport", Label = "匯出" })
                    @await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunView", Label = "檢視" })
                </div>
            </div>

        </form>

        <div class='x-btns-box mt-1'>
            <span class="x-span-label">角色功能</span>
            @await Component.InvokeAsync("XgAddRow", "_me.mRoleProg.onAddRow")
        </div>
        <form id='eformRoleProg' class='x-form border-0'>
            <table class="table x-table x-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        @await Component.InvokeAsync("XgTh", new XgThDto { Title = "角色", Required = true })
                        <th>新增</th>
                        <th>查詢</th>
                        <th>修改</th>
                        <th>刪除</th>
                        <th>列印</th>
                        <th>匯出</th>
                        <th>檢視</th>
                        <th>維護</th>
                    </tr>
                </thead>
                <tbody id="tbodyRoleProg"></tbody>
            </table>
        </form>
        <vc:xg-save-back />
    </div>
</div>

<script id="tplRoleProg" type="text/template">
    <tr>
        @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "Id" })
        @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "ProgId" })
        <td>@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "RoleId", Rows = ViewBag.Roles, Required = true })</td>

        @if (isAuthRow)
        {
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunCreate" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunRead", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunUpdate", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunDelete", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunPrint", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunExport", Rows = authRanges })</td>
            <td class="x-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunView", Rows = authRanges })</td>
        }
        else
        {
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunCreate" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunRead" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunUpdate" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunDelete" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunPrint" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunExport" })</td>
            <td class="x-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunView" })</td>
        }

        <td width='60px' class='text-center'>@await Component.InvokeAsync("XgDeleteRow", "_me.mRoleProg.onDeleteRow")</td>
    </tr>
</script>