{"version":3,"file":"_File.js","sourceRoot":"","sources":["../../../../_tsBase/services/_File.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,QAAQ,CAAC;AAE1B,MAAM,CAAC,OAAO,OAAO,KAAK;IAEtB;;;;OAIG;IACH,MAAM,CAAC,WAAW,CAAC,IAAY;QAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;QAC/C,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,UAAU,CAAC,IAAY;QAC1B,0EAA0E;QAC1E,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,UAAU,CAAC,GAAW;QACzB,0DAA0D;QAC1D,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACnC,OAAO,CAAC,6BAA6B,CAAC,CAAC,OAAO,CAAC,GAAG,GAAG,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9E,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,UAAU,CAAC,GAAW;QACzB,0DAA0D;QAC1D,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACnC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,GAAG,GAAG,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7D,CAAC;CAEJ,CAAC,OAAO","sourcesContent":["import _Str from \"./_Str\";\r\n\r\nexport default class _File {\r\n\r\n    /**\r\n     * get file name by path\r\n     * @param path The full or relative path to the file.\r\n     * @returns The file name with extension.\r\n     */ \r\n    static getFileName(path: string): string {\r\n        const sep = path.indexOf('/') > 0 ? '/' : '\\\\';\r\n        return _Str.getTail(path, sep);\r\n    }\r\n\r\n    /**\r\n     * get file ext without '.' in lowerCase, ex: txt\r\n     * @param path The full or relative path to the file.\r\n     * @returns The file extension in lowercase without the dot.\r\n     */\r\n    static getFileExt(path: string): string {\r\n        // Assuming _Str.getTail(path, '.') returns the string after the last dot.\r\n        return _Str.getTail(path, '.').toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Checks if the extension is a common image extension.\r\n     * @param ext The file extension (without dot).\r\n     * @returns True if it's a known image extension.\r\n     */\r\n    static isImageExt(ext: string): boolean {\r\n        // Ensure the input extension is lowercased for comparison\r\n        const lowerExt = ext.toLowerCase();\r\n        return (\",jpg,jpeg,png,gif,tif,tiff,\").indexOf(\",\" + lowerExt + \",\") >= 0;\r\n    }\r\n\r\n    /**\r\n     * Checks if the extension is a common Excel extension.\r\n     * @param ext The file extension (without dot).\r\n     * @returns True if it's a known Excel extension.\r\n     */\r\n    static isExcelExt(ext: string): boolean {\r\n        // Ensure the input extension is lowercased for comparison\r\n        const lowerExt = ext.toLowerCase();\r\n        return (\",xls,xlsx,\").indexOf(\",\" + lowerExt + \",\") >= 0;\r\n    }\r\n\r\n} //class"]}