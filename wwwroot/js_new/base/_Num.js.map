{"version":3,"file":"_Num.js","sourceRoot":"","sources":["../../../base/_Num.ts"],"names":[],"mappings":"AAAA,MAAM;AACN,MAAM,CAAC,OAAO,OAAO,IAAI;IACrB,gBAAgB;IAChB,YAAY;IACL,MAAM,CAAC,SAAS,CAAC,KAAU,EAAE,IAAa;QAC7C,IAAI,KAAK,CAAC,KAAK,CAAC;YACZ,OAAO,KAAK,CAAC;aACZ,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,CAAC,CAAC;YAC5C,OAAO,KAAK,CAAC;aACZ,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;YACxB,OAAO,KAAK,CAAC;;YAEb,OAAO,IAAI,CAAC;IACpB,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,KAAU;QAC1B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAEM,MAAM,CAAC,MAAM,CAAC,KAAa;QAC9B,OAAO,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;IACzB,CAAC;IAEM,MAAM,CAAC,SAAS,CAAC,GAA2B,EAAE,IAAc;QAC/D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACrC,CAAC;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAED,oDAAoD;IAC7C,MAAM,CAAC,QAAQ,CAAC,GAAoB;QACvC,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QAC3B,MAAM,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACd,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1C,MAAM,GAAG,GAAG,cAAc,CAAC;QAC3B,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;YAClB,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;QAC5C,CAAC;QACD,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;CAEJ;AAAA,CAAC,CAAA,OAAO","sourcesContent":["//數字相關\r\nexport default class _Num {\r\n    //是否為數字而且大於(等於)0\r\n    //zeor: 可否為0\r\n    public static isBigZero(value: any, zero: boolean): boolean {\r\n        if (isNaN(value))\r\n            return false;\r\n        else if (!zero && (value === '0' || value === 0))\r\n            return false;\r\n        else if (parseInt(value) < 0)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    public static isNum(value: any): boolean {\r\n        return !isNaN(value);\r\n    }\r\n\r\n    public static toBool(value: number): boolean {\r\n        return (value === 1);\r\n    }\r\n\r\n    public static rowToBool(row: { [key: string]: any }, fids: string[]): { [key: string]: any } {\r\n        for (let i = 0; i < fids.length; i++) {\r\n            const fid = fids[i];\r\n            row[fid] = _Num.toBool(row[fid]);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    //http://www.mredkj.com/javascript/numberFormat.html\r\n    public static addComma(str: string | number): string {\r\n        const strVal = String(str);\r\n        const x = strVal.split('.');\r\n        let x1 = x[0];\r\n        const x2 = x.length > 1 ? '.' + x[1] : '';\r\n        const rgx = /(\\d+)(\\d{3})/;\r\n        while (rgx.test(x1)) {\r\n            x1 = x1.replace(rgx, '$1' + ',' + '$2');\r\n        }\r\n        return x1 + x2;\r\n    }\r\n\r\n};//class"]}