{"version":3,"file":"_IColor.js","sourceRoot":"","sources":["../../../../base/services/_IColor.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,QAAQ,CAAC;AAE1B,MAAM,CAAC,OAAO,OAAO,OAAO;IAExB,MAAM,CAAC,IAAI;QACP,4DAA4D;QAC5D,CAAC,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC;QACtB,kBAAkB;QAClB;;;;UAIE;SACL,CAAC,CAAC;IACP,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,GAAW,EAAE,IAAa;QACjC,gDAAgD;QAChD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;IAC1C,CAAC;IACD,iBAAiB;IACjB,MAAM,CAAC,IAAI,CAAC,MAAc,EAAE,IAAa;QACrC,gDAAgD;QAChD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9C,CAAC;IACD,iBAAiB;IACjB,MAAM,CAAC,IAAI,CAAC,GAAW;QACnB,IAAI,GAAG,IAAI,IAAI;YAAE,OAAO,IAAI,CAAC;QAC7B,gDAAgD;QAChD,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,wCAAwC;IACxC,gGAAgG;IAChG,MAAM,CAAC,QAAQ,CAAC,GAAW;QACvB,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;QAC5D,IAAI,CAAC,KAAK;YAAE,OAAO,GAAG,CAAC,CAAC,0CAA0C;QAElE,mIAAmI;QACnI,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;YAC1B,mEAAmE;YACnE,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC3C,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC;gBAChB,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;YACtB,GAAG,IAAI,IAAI,CAAC;QAChB,CAAC;QACD,OAAO,GAAG,GAAG,GAAG,CAAC;IACrB,CAAC;CAoBJ;AAAA,CAAC,CAAC,OAAO","sourcesContent":["import _Obj from \"./_Obj\";\r\n\r\nexport default class _IColor {\r\n\r\n    static init(): void {\r\n        // @ts-ignore: colorpicker is expected to be a jQuery plugin\r\n        $('.x-color').colorpicker({\r\n            //component: true,\r\n            /*\r\n            onchange: function (me, color) {\r\n                $(me).css('background-color', color.toHex());\r\n            },\r\n            */\r\n        });\r\n    }\r\n\r\n    static get(fid: string, form?: JQuery): StrN {\r\n        // @ts-ignore: 'this' will be _IColor at runtime\r\n        return this.getO(_Obj.get(fid, form));\r\n    }\r\n    //value by filter\r\n    static getF(filter: string, form?: JQuery): StrN {\r\n        // @ts-ignore: 'this' will be _IColor at runtime\r\n        return this.getO(_Obj.getF(filter, form));\r\n    }\r\n    //value by object\r\n    static getO(obj: JQuery): StrN {\r\n        if (obj == null) return null;\r\n        // @ts-ignore: 'this' will be _IColor at runtime\r\n        return this.rgbToHex(obj.find('i').css('background-color'));\r\n    }\r\n\r\n    //convert jquery RGB color to hex(has #)\r\n    //https://stackoverflow.com/questions/5999209/how-to-get-the-background-color-code-of-an-element\r\n    static rgbToHex(rgb: string): string {\r\n        const parts = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\r\n        if (!parts) return rgb; // Return original if format doesn't match\r\n\r\n        // delete (parts[0]); // Don't use delete on array index, use slice or shift if needed, but here we just ignore index 0 in the loop\r\n        let hex = '';\r\n        for (let i = 1; i <= 3; ++i) {\r\n            // @ts-ignore: parts[i] is guaranteed to be a string of digits here\r\n            let part = parseInt(parts[i]).toString(16);\r\n            if (part.length == 1)\r\n                part = '0' + part;\r\n            hex += part;\r\n        }\r\n        return '#' + hex;\r\n    }\r\n\r\n    /*\r\n    onChange: function(me) {\r\n        $(me).css('background-color', me.color.toHex());\r\n    },\r\n    */\r\n\r\n    /*\r\n    set: function (fid, value, form) {\r\n        _itext.setO(_obj.get(fid, form), value)\r\n    },\r\n    setF: function (filter, value, form) {\r\n        _itext.setO(_obj.getF(filter, form), value)\r\n    },\r\n    setO: function (obj, value) {\r\n        obj.val(value);\r\n    },\r\n    */\r\n\r\n}; //class"]}