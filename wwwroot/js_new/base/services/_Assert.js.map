{"version":3,"file":"_Assert.js","sourceRoot":"","sources":["../../../../base/services/_Assert.ts"],"names":[],"mappings":"AAAA,YAAY;AACZ,OAAO,MAAM,MAAM,UAAU,CAAC;AAE9B;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,OAAO;IAExB;;;OAGG;IACH,MAAM,CAAC,IAAI,CAAC,GAAW;QACnB,MAAM,CAAC,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,OAAO,CAAC,KAAU,EAAE,GAAwC;QAC/D,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,yCAAyC;QACzC,4CAA4C;QAC5C,KAAK,MAAM,IAAI,IAAI,GAAG,EAAE,CAAC;YACrB,2BAA2B;YAC3B,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC;gBAChB,IAAI,GAAG,IAAI,CAAC;gBACZ,MAAM;YACV,CAAC;QACL,CAAC;QAED,IAAI,CAAC,IAAI;YACL,OAAO,CAAC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,CAAC;IACjD,CAAC;CAEJ","sourcesContent":["// 假設的依賴靜態類別\r\nimport _Error from \"./_Error\";\r\n\r\n/**\r\n * assertion helper class\r\n */\r\nexport default class _Assert {\r\n\r\n    /**\r\n     * Log an assertion message using _error.log\r\n     * param msg {string} The message to log.\r\n     */\r\n    static echo(msg: string): void {\r\n        _Error.log('_assert.js ' + msg);\r\n    }\r\n\r\n    /**\r\n     * Assert if a value is present in an array or object keys.\r\n     * NOTE: Original implementation uses 'for...in' which iterates over keys/indices (strings)\r\n     * and performs loose comparison (==).\r\n     * * param value {any} The value to find.\r\n     * param ary {Array<any> | { [key: string]: any }} The array or object keys to search in.\r\n     * return {void} (The function asserts/logs on failure)\r\n     */\r\n    static inArray(value: any, ary: Array<any> | { [key: string]: any }): void {\r\n        let find = false;\r\n        \r\n        // 原始程式碼使用了 for...in, 這會遍歷物件的可列舉屬性 (key),\r\n        // 如果 ary 是陣列，它會遍歷索引 (index) 且索引是 string 類型。\r\n        for (const item in ary) {\r\n            // 使用 == 保持與原始 js 相同的寬鬆比較行為\r\n            if (item == value) {\r\n                find = true;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if (!find)\r\n            _Assert.echo('inArray failed: ' + value);\r\n    }\r\n\r\n}"]}