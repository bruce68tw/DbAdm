{"version":3,"file":"_Str.js","sourceRoot":"","sources":["../../../../base/services/_Str.ts"],"names":[],"mappings":"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","sourcesContent":["import _Var from \"./_Var\";\r\n\r\nexport default class _Str {\r\n\r\n    //column seperator\r\n    static readonly colSep: string = '@@';\r\n\r\n    //variables is empty or not\r\n    static isEmpty(str: StrN): boolean {\r\n        return (str === undefined || str === null || str === '');\r\n    }\r\n\r\n    static notEmpty(str: StrN): boolean {\r\n        return !_Str.isEmpty(str);\r\n    }\r\n\r\n    //convert empty string to new string\r\n    static emptyToStr(str: StrN, newStr: string): string {\r\n        return _Str.isEmpty(str) ? newStr : str as string;\r\n    }\r\n\r\n    /**\r\n     * format string like c# String.Format()\r\n     * The first argument is the format string, subsequent arguments are values to insert.\r\n     */\r\n    static format(...args: any[]): string {\r\n        let str = args[0] as string;\r\n        for (let i = 0; i < args.length - 1; i++) {\r\n            const reg = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"gm\");\r\n            str = str.replace(reg, args[i + 1]);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    //get mid part string\r\n    static getMid(str: string, find1: string, find2: string): string {\r\n        if (_Str.isEmpty(str))\r\n            return '';\r\n        const pos = str.indexOf(find1);\r\n        if (pos < 0)\r\n            return str;\r\n        const pos2 = str.indexOf(find2, pos + 1);\r\n        return (pos2 < 0)\r\n            ? str.substring(pos + find1.length)\r\n            : str.substring(pos + find1.length, pos2);\r\n    }\r\n\r\n    //get tail part string\r\n    static getTail(value: string, find: string): string {\r\n        const pos = value.lastIndexOf(find);\r\n        return (pos > 0)\r\n            ? value.substring(pos + 1)\r\n            : value;\r\n    }\r\n\r\n    static toBool(val: any): boolean {\r\n        //return (val === '1' || val === true || val === 'True');\r\n        // Assuming _var.toBool is on a class named _Var\r\n        return _Var.toBool(val);\r\n    }\r\n\r\n    /**\r\n     * 合併多個欄位成為字串??\r\n     * The first argument is the initial string, subsequent arguments are appended with colSep.\r\n     */\r\n    static colsToStr(...args: string[]): string {\r\n        let str = args[0];\r\n        for (let i = 1; i < args.length; i++)\r\n            str += _Str.colSep + args[i];\r\n        return str;\r\n    }\r\n\r\n    static trim(str: string): string {\r\n        return str.trim();\r\n    }\r\n\r\n    static toJson(str: string): any | null {\r\n        try {\r\n            return JSON.parse(str);\r\n        } catch (error) {\r\n            //console.log(\"JSON.parse failed\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static replaceAll(str: string, oldStr: string, newStr: string): string {\r\n        // 轉義特殊字元，避免錯誤正則\r\n        const oldStr2 = oldStr.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n        const regex = new RegExp(oldStr2, 'g');\r\n        return str.replace(regex, newStr);\r\n    }\r\n} //class"]}